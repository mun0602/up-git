#!/bin/bash

# Script t·ª± ƒë·ªông upload code l√™n GitHub - Phi√™n b·∫£n t·ªëi ∆∞u
# Author: mun0602
# Date: 2025-07-01

# H√†m ki·ªÉm tra v√† thi·∫øt l·∫≠p GitHub authentication
setup_github_auth() {
    echo "Ki·ªÉm tra c·∫•u h√¨nh GitHub..."
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ token GitHub ch∆∞a
    if ! git config --get github.token &> /dev/null; then
        echo "Ch∆∞a t√¨m th·∫•y token GitHub. Vui l√≤ng thi·∫øt l·∫≠p:"
        echo "1. Truy c·∫≠p https://github.com/settings/tokens"
        echo "2. T·∫°o token m·ªõi v·ªõi quy·ªÅn 'repo'"
        read -p "Nh·∫≠p token GitHub c·ªßa b·∫°n: " github_token
        
        # L∆∞u token v√†o git config
        git config --global github.token "$github_token"
        echo "ƒê√£ l∆∞u token GitHub."
    fi
    
    # Ki·ªÉm tra c·∫•u h√¨nh Git c∆° b·∫£n
    if ! git config --get user.name &> /dev/null || ! git config --get user.email &> /dev/null; then
        echo "Vui l√≤ng nh·∫≠p th√¥ng tin Git c·ªßa b·∫°n:"
        read -p "Nh·∫≠p t√™n c·ªßa b·∫°n: " git_name
        read -p "Nh·∫≠p email GitHub c·ªßa b·∫°n: " git_email
        
        git config --global user.name "$git_name"
        git config --global user.email "$git_email"
        echo "ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin Git."
    fi
}

# H√†m ki·ªÉm tra k·∫øt n·ªëi internet
check_internet_connection() {
    echo "Ki·ªÉm tra k·∫øt n·ªëi internet..."
    if ping -c 1 github.com &> /dev/null; then
        echo "K·∫øt n·ªëi internet OK."
        return 0
    else
        echo "Kh√¥ng c√≥ k·∫øt n·ªëi internet. Vui l√≤ng ki·ªÉm tra m·∫°ng c·ªßa b·∫°n."
        return 1
    fi
}

# H√†m ki·ªÉm tra c·∫•u h√¨nh Git
check_git_config() {
    echo "Ki·ªÉm tra c·∫•u h√¨nh Git..."
    if git config --get user.name &> /dev/null && git config --get user.email &> /dev/null; then
        echo "C·∫•u h√¨nh Git OK."
        echo "  T√™n: $(git config --get user.name)"
        echo "  Email: $(git config --get user.email)"
        return 0
    else
        echo "C·∫•u h√¨nh Git ch∆∞a ƒë·∫ßy ƒë·ªß. Vui l√≤ng c·∫•u h√¨nh:"
        read -p "Nh·∫≠p t√™n c·ªßa b·∫°n: " git_name
        read -p "Nh·∫≠p email c·ªßa b·∫°n: " git_email
        git config --global user.name "$git_name"
        git config --global user.email "$git_email"
        echo "ƒê√£ c·∫≠p nh·∫≠t c·∫•u h√¨nh Git."
        return 0
    fi
}

# H√†m ki·ªÉm tra k·∫øt n·ªëi GitHub v·ªõi s·ªë l·∫ßn th·ª≠ l·∫°i
check_github_connection() {
    local repo_url="$1"
    local max_attempts=3
    local attempt=1
    
    echo "Ki·ªÉm tra k·∫øt n·ªëi GitHub..."
    
    while [ $attempt -le $max_attempts ]; do
        if git ls-remote "$repo_url" &> /dev/null; then
            echo "K·∫øt n·ªëi GitHub th√†nh c√¥ng."
            return 0
        else
            echo "L·∫ßn th·ª≠ $attempt/$max_attempts: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn repository GitHub."
            if [ $attempt -lt $max_attempts ]; then
                echo "ƒêang th·ª≠ l·∫°i sau 5 gi√¢y..."
                sleep 5
            fi
            attempt=$((attempt + 1))
        fi
    done
    
    echo "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn repository GitHub sau $max_attempts l·∫ßn th·ª≠."
    echo "Vui l√≤ng ki·ªÉm tra:"
    echo "1. URL repository c√≥ ch√≠nh x√°c kh√¥ng"
    echo "2. B·∫°n c√≥ quy·ªÅn truy c·∫≠p repository kh√¥ng"
    echo "3. Repository c√≥ t·ªìn t·∫°i kh√¥ng"
    return 1
}

# H√†m t·∫°o commit message v·ªõi th√¥ng tin chi ti·∫øt
create_commit_message() {
    local script_file="$1"
    local user_name=$(git config --get user.name)
    local user_email=$(git config --get user.email)
    local current_date=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "Th√™m script $script_file

Author: $user_name <$user_email>
Date: $current_date
Description: Script ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·∫±ng auto-upload tool"
}

# G·ªçi h√†m setup GitHub auth ngay khi b·∫Øt ƒë·∫ßu script
echo "=== AUTO UPLOAD GITHUB SCRIPT ==="
echo "Phi√™n b·∫£n t·ªëi ∆∞u - Created by mun0602"
echo "Ng√†y: $(date '+%Y-%m-%d %H:%M:%S')"
echo "=================================="

setup_github_auth

# Nh·∫≠p t√™n file .sh c·∫ßn t·∫°o
while true; do
    echo "Nh·∫≠p t√™n file .sh c·∫ßn t·∫°o (kh√¥ng c·∫ßn nh·∫≠p ƒëu√¥i .sh):"
    read file_name
    
    # Ki·ªÉm tra input kh√¥ng r·ªóng
    if [[ -z "$file_name" ]]; then
        echo "T√™n file kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
        continue
    fi
    
    folder_name="${file_name}-folder"
    script_file="${file_name}.sh"
    
    # Ki·ªÉm tra n·∫øu file ho·∫∑c th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i
    if [ -d "$folder_name" ] || [ -f "$folder_name/$script_file" ]; then
        echo "Th∆∞ m·ª•c '$folder_name' ho·∫∑c file '$script_file' ƒë√£ t·ªìn t·∫°i."
        read -p "B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng? (y/n): " overwrite
        if [[ "$overwrite" == "y" || "$overwrite" == "Y" ]]; then
            rm -rf "$folder_name"
            break
        else
            echo "Vui l√≤ng ch·ªçn t√™n kh√°c."
        fi
    else
        break
    fi
done

# T·∫°o th∆∞ m·ª•c v√† file
echo "T·∫°o th∆∞ m·ª•c '$folder_name' v√† file '$script_file'..."
mkdir -p "$folder_name"
cd "$folder_name"
touch "$script_file"

# T·∫°o template c∆° b·∫£n cho script
cat > "$script_file" << 'EOF'
#!/bin/bash

# Script template ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
# Author: $(git config --get user.name)
# Email: $(git config --get user.email)
# Date: $(date '+%Y-%m-%d %H:%M:%S')

echo "Hello World!"
echo "Script ƒë∆∞·ª£c t·∫°o b·ªüi: $(git config --get user.name)"

# Th√™m code c·ªßa b·∫°n v√†o ƒë√¢y

EOF

# M·ªü file trong nano ƒë·ªÉ s·ª≠a
echo "ƒê√£ t·∫°o template cho file $script_file."
read -p "B·∫°n c√≥ mu·ªën ch·ªânh s·ª≠a file ngay b√¢y gi·ªù kh√¥ng? (y/n): " edit_now

if [[ "$edit_now" == "y" || "$edit_now" == "Y" ]]; then
    echo "M·ªü nano ƒë·ªÉ ch·ªânh s·ª≠a..."
    nano "$script_file"
fi

# Ki·ªÉm tra n·∫øu user ƒë√£ l∆∞u file
if [ -s "$script_file" ]; then
    echo "File $script_file ƒë√£ s·∫µn s√†ng."
else
    echo "File $script_file r·ªóng, s·∫Ω s·ª≠ d·ª•ng template m·∫∑c ƒë·ªãnh."
fi

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho file
chmod +x "$script_file"
echo "ƒê√£ c·∫•p quy·ªÅn th·ª±c thi cho $script_file."

# Kh·ªüi t·∫°o Git
echo "Kh·ªüi t·∫°o Git repository..."
git init

# T·∫°o .gitignore
cat > .gitignore << 'EOF'
# OS files
.DS_Store
Thumbs.db

# Editor files
*.swp
*.swo
*~

# Logs
*.log
EOF

# Th√™m file v√†o Git
echo "Th√™m files v√†o Git..."
git add .

# T·∫°o commit v·ªõi th√¥ng tin chi ti·∫øt
commit_message=$(create_commit_message "$script_file")
git commit -m "$commit_message"

echo "Commit th√†nh c√¥ng v·ªõi th√¥ng tin:"
echo "  Author: $(git config --get user.name) <$(git config --get user.email)>"
echo "  Message: Th√™m script $script_file"

# Th√™m remote repository
while true; do
    read -p "Nh·∫≠p URL repository GitHub c·ªßa b·∫°n: " repo_url
    
    # Ki·ªÉm tra URL kh√¥ng r·ªóng
    if [[ -z "$repo_url" ]]; then
        echo "URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
        continue
    fi
    
    # Ki·ªÉm tra k·∫øt n·ªëi internet tr∆∞·ªõc
    if ! check_internet_connection; then
        read -p "B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng? (y/n): " retry
        [ "$retry" != "y" ] && exit 1
        continue
    fi
    
    # Ki·ªÉm tra c·∫•u h√¨nh Git
    if ! check_git_config; then
        read -p "B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng? (y/n): " retry
        [ "$retry" != "y" ] && exit 1
        continue
    fi
    
    # Ki·ªÉm tra k·∫øt n·ªëi GitHub
    if check_github_connection "$repo_url"; then
        # Ki·ªÉm tra xem remote ƒë√£ t·ªìn t·∫°i ch∆∞a
        if git remote get-url origin &> /dev/null; then
            echo "Remote origin ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t URL..."
            git remote set-url origin "$repo_url"
        else
            if git remote add origin "$repo_url"; then
                echo "ƒê√£ th√™m remote repository th√†nh c√¥ng."
            else
                echo "Kh√¥ng th·ªÉ th√™m remote repository. Vui l√≤ng th·ª≠ l·∫°i."
                continue
            fi
        fi
        break
    else
        read -p "B·∫°n c√≥ mu·ªën th·ª≠ l·∫°i kh√¥ng? (y/n): " retry
        [ "$retry" != "y" ] && exit 1
    fi
done

# Push l√™n repository
echo "ƒêang push code l√™n GitHub..."
git branch -M main

# Th·ª≠ push v·ªõi retry mechanism
max_push_attempts=3
push_attempt=1

while [ $push_attempt -le $max_push_attempts ]; do
    echo "L·∫ßn th·ª≠ push $push_attempt/$max_push_attempts..."
    
    if git push -u origin main; then
        echo "Push th√†nh c√¥ng!"
        break
    else
        echo "Push th·∫•t b·∫°i l·∫ßn $push_attempt."
        
        if [ $push_attempt -lt $max_push_attempts ]; then
            echo "ƒêang th·ª≠ l·∫°i sau 3 gi√¢y..."
            sleep 3
            
            # Th·ª≠ pull tr∆∞·ªõc khi push l·∫°i
            echo "Th·ª≠ ƒë·ªìng b·ªô v·ªõi remote..."
            git pull origin main --rebase 2>/dev/null || true
        else
            echo "Kh√¥ng th·ªÉ push sau $max_push_attempts l·∫ßn th·ª≠."
            echo "Vui l√≤ng ki·ªÉm tra:"
            echo "1. Token GitHub c√≥ ƒë√∫ng kh√¥ng"
            echo "2. Quy·ªÅn truy c·∫≠p repository"
            echo "3. Th·ª≠ push th·ªß c√¥ng: git push -u origin main"
            exit 1
        fi
    fi
    
    push_attempt=$((push_attempt + 1))
done

# Th√¥ng b√°o ho√†n t·∫•t
echo "=================================="
echo "üéâ HO√ÄN T·∫§T!"
echo "Script $script_file ƒë√£ ƒë∆∞·ª£c ƒë·∫©y l√™n GitHub repository th√†nh c√¥ng!"
echo "Repository: $repo_url"
echo "Author: $(git config --get user.name) <$(git config --get user.email)>"
echo "Commit: $(git log --oneline -1)"
echo "Th·ªùi gian: $(date '+%Y-%m-%d %H:%M:%S')"
echo "=================================="

# Hi·ªÉn th·ªã th√¥ng tin h·ªØu √≠ch
echo "C√°c l·ªánh h·ªØu √≠ch:"
echo "  - Xem status: git status"
echo "  - Xem log: git log --oneline"
echo "  - Push thay ƒë·ªïi m·ªõi: git add . && git commit -m 'message' && git push"
